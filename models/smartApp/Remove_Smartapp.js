const mongoose = require("mongoose");

const SmartappSchema = new mongoose.Schema({
  transactionID: {
    type: String,
    required: [true, "Please add transactionID (DDMMYYY-HHMMSS-C)"],
    unique: true,
    trim: true,
    maxlength: [20, "Name can not be more than 20 characters"],
  },
  transactionType: { type: String },
  ActionedBy: { type: String },
  Address: { type: String },
  Amount: { type: Number },
  Approver: { type: String },
  Area: { type: String },
  Category: { type: String },
  Cost: { type: Number },
  Date: { type: Date },
  Days: { type: Number },
  Details: { type: String },
  DOB: { type: Date },
  EmployeeID: { type: String },
  Equipment: { type: String },
  External: { type: Boolean },
  ForName: { type: String },
  FromDate: { type: Date },
  GrossValue: { type: Number },
  InvoiceStatus: { type: String },
  Make: { type: String },
  Model: { type: String },
  Name: { type: String },
  NetValue: { type: Number },
  NotifyRole: { type: String },
  OrderStatus: { type: String },
  Partner: { type: String },
  PartnerName: { type: String },
  PartnerRef: { type: String },
  PaymentStatus: { type: String },
  Phase: { type: String },
  ContactNo: { type: String },
  PONo: { type: String },
  Position: { type: String },
  PostCode: { type: String },
  Priority: { type: String },
  Problem: { type: String },
  ProjectCode: { type: String },
  Reason: { type: String },
  ReferenceNo: { type: String },
  Remark: { type: String },
  Result: { type: String },
  SerialNo: { type: String },
  Status: { type: String },
  Time: { type: Date },
  Title: { type: String },
  ToDate: { type: Date },
  Total: { type: Number },
  Status: { type: String },
  partner: {
    type: mongoose.Schema.ObjectId,
    ref: "User",
    required: true,
  },
  data: {},

  applicationName: { type: String },
  applicationID: { type: String },
  appId: {
    type: mongoose.Schema.ObjectId,
    ref: "App",
    required: true,
  },

  areaName: { type: String },
  areaId: {
    type: mongoose.Schema.ObjectId,
    ref: "Area",
    required: true,
  },

  branchName: { type: String },
  branchId: {
    type: mongoose.Schema.ObjectId,
    ref: "Branch",
    required: true,
  },
  companyName: { type: String },
  companyId: {
    type: mongoose.Schema.ObjectId,
    ref: "Company",
    required: true,
  },

  user: {
    type: mongoose.Schema.ObjectId,
    ref: "User",
    required: true,
  },
  dataStore: {
    type: String,
  },

  photo: {
    type: [String],
    default: "no-photo.jpg",
  },
  attachment: {
    type: [String],
    default: "no-attachment.pdf",
  },
  createdAt: {
    type: Date,
    default: Date.now,
  },
});

module.exports = mongoose.model("Smartapp", SmartappSchema);
